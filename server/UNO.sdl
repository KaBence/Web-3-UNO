type Player {
    name: String!
    unoCalled: Boolean!
    hand: Hand!
    playerName:Int!
}

type Round {
    players: [Player]
    topCard: Card
    currentDirection: String
    winner: Int
    currentPlayer: Int
    statusMessage: String
}

type Card {
    type: String!
    color: String
    number: Int
}

type Deck{
    type:String
    cards: [Card]!
}

type Scores {
    player: Int
    score: Int
}

scalar JSON

type Game {
    currentRound: Round
    players: [Player]
    scores: JSON
    dealer: Int
    id: Int
}

type Hand{
    cards: [Card]
}

type Query {
    activeGames: [Game]!
    pendingGames: [Game]!
}

type Mutation {
    createGame: Game!
    addPlayer(gameId: Int!, playerName: String!): Game!
    removePlayer(gameId: Int!, playerId: Int!): Game!
    startRound(gameId: Int!): Game!
    playCard(gameId: Int!, cardId: Int!, chosenColor: String): Game!
    drawCard(gameId: Int!): Game!
    unoCall(gameId: Int!, playerId: Int!): Game!
    accuseUno(gameId: Int!, accuser: Int!, accused:Int!): Game!
    challengeDraw4(gameId: Int!): Game!
}
